@use "sass:math"


@mixin align-center-absolute()
	position: absolute
	top: 50%
	left: 50%
	transform: translate(-50%, -50%)


@mixin make-container($margin: 0, $padding-x: 0)
	position: relative
	margin-right: $margin
	margin-left: $margin
	@if ($padding-x != 0)
		padding-right: $padding-x
		padding-left: $padding-x


@mixin font($f-name, $f-style, $f-weight, $local-url, $url:none, $display:swap)
	@font-face
		font-family: $f-name
		font-display: $display
		font-style: $f-style
		@if $f-weight != 0
			font-weight: $f-weight
		src: url($local-url) if($url, #{','} $url format('woff2'), format('woff2'))
		@content


@mixin font-settings($font, $color:false, $size:false, $case:false, $weight:false, $lh:false)
	font-family: "#{$font}"
	@if $size
		font-size: $size
	@if $color
		color: $color
	@if $case
		text-transform: $case
	@if $weight
		font-weight: $weight
	@if $lh
		line-height: $lh


//Убираем единицы измерения у чисел
@function strip-units($size)
	$number: math.div($size, ($size * 0 + 1))
	@return $number


@function em($pixels, $fontsize)
	$fontsize: $fontsize + 0px
	@return math.div($pixels, $fontsize)*1em


@function px($em, $fontsize)
	@return round(strip-units($em) * strip-units($fontsize))*1px


//Автоматическое центрирование
@mixin push--auto
	margin:
		left: auto
		right: auto


//Абсолютное позиционирование в размер родителя
@mixin push--absolute($t: none, $r: none, $b: none, $l: none)
	position: absolute
	@if $l == none and $b == none and $r == none
		@if $t == none
			top: 0
			left: 0
			width: 100%
			height: 100%
		@else
			top: $t
			left: $t
			right: $t
			bottom: $t
	@else
		@if $t != 0
			top: $t
		@if $r != 0
			right: $r
		@if $b != 0
			bottom: $b
		@if $l != 0
			left: $l


@function hex-to-rgb($hex)
	@return red($hex), green($hex), blue($hex)


@mixin blur-background($blur:10px, $color:white, $transparentize:0, $filter_transparentize:0)
	@supports not (backdrop-filter: blur($blur))
		background-color: transparentize($color, $transparentize)
	@supports (backdrop-filter: blur($blur)) or (-webkit-backdrop-filter: blur($blur))
		@if $filter_transparentize != 0
			background-color: transparentize($color, $filter_transparentize)
		backdrop-filter: blur($blur)


// Вычисляем высоту блока за вычетом видимых в области экрана
// например: height: calc-height($header-height, $nav-height, $top-bar-height)
@function calc-height($parent_h, $h1, $h2:0, $h3:0, $h4:0)
	$h: strip-units($h1) + strip-units($h2) + strip-units($h3)
	@if $h4 != 0
		@return calc(#{$parent_h} - #{$h}px - #{$h4})
	@else
		@return calc(#{$parent_h} - #{$h}px)


@mixin animation-delays($items, $start-delay:0ms, $between-delay:50ms)
	@for $i from 0 through $items
		&:nth-child(#{$i+1})
			animation-delay: $start-delay+($between-delay*($i))


// End of magic parallax mixins
@mixin transition-delays($items, $start-delay:0ms, $between-delay:50ms)
	@for $i from 0 through $items
		&:nth-child(#{$i+1})
			transition-delay: $start-delay+($between-delay*($i))


@function shadows($max: 5, $color: white)
	$out: null

	@for $i from 0 through $max
		$pos: #{$i}px
		$pos-n: -$pos
		$shadow-t-l: $pos-n $pos-n 0 $color
		$out: append($out, $shadow-t-l, comma)
		$shadow-t-r: $pos $pos-n 0 $color
		$out: append($out, $shadow-t-r, comma)
		$shadow-b-r: $pos $pos 0 $color
		$out: append($out, $shadow-b-r, comma)
		$shadow-b-l: $pos-n $pos 0 $color
		$out: append($out, $shadow-b-l, comma)

	$shadow-back: 0 5px 10px transparentize(black, 0.8)
	$out: append($out, $shadow-back, comma)

	@return $out


@mixin pseudo($pos:relative, $content:'')
	content: $content
	display: table
	@if $pos == absolute
		+push--absolute()
	@else
		position: $pos


// Миксин для создания масштабируемыхэлементов(обычно изображения/картинки заднего фона),
// чтобы поддерживать соотношение. Пример: @include responsive-ratio(16,9)
@mixin responsive-ratio($x:1, $y:1, $h:0, $pseudo:false,$pos:relative)
	$padding: unquote(math.div($y, $x)*100+'%')
	@if $pseudo
		position: $pos
		&::before
			@include pseudo($pos)
			width: 100%
			padding-bottom: $padding
	@else
		position: $pos
		width: 100%
		height: $h
		padding-bottom: $padding
	img
		+push--absolute


//миксин создает треугольники. Задаются цвет, размер и направление
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false)
	@include pseudo($pos: $position)
	width: 0
	height: 0
	@if $round
		border-radius: 3px
	@if $direction == down
		border-left: $size solid transparent
		border-right: $size solid transparent
		border-top: $size solid $color
		margin-top: (0 - round( $size / 2.5 ))
	@else if $direction == up
		border-left: $size solid transparent
		border-right: $size solid transparent
		border-bottom: $size solid $color
		margin-bottom: 0 - round( $size / 2.5 )
	@else if $direction == right
		border-top: $size solid transparent
		border-bottom: $size solid transparent
		border-left: $size solid $color
		margin-right: -$size
	@else if $direction == left
		border-top: $size solid transparent
		border-bottom: $size solid transparent
		border-right: $size solid $color
		margin-left: -$size


// Responsive image
@mixin img-responsive
	img
		width: 100%
		height: auto


@mixin placeholder($color)
	::-webkit-input-placeholder
		color: $color
	::-moz-placeholder
		color: $color


@function calcFluidFontSize($f-min, $f-max, $w-min, $w-max, $units: px)
	$f-min: strip-units($f-min)
	$f-max: strip-units($f-max)
	$w-min: strip-units($w-min)
	$w-max: strip-units($w-max)

	$k: ($f-max - $f-min)/($w-max - $w-min)
	$b: $f-min - $k * $w-min

	$b: $b + $units

	@return calc(#{$k} * 100vw + #{$b})


$pi: 3.14159265359
$_precision: 10

@function pow($base, $exp)
	$value: $base
	@if $exp > 1
		@for $i from 2 through $exp
			$value: $value * $base

	@if $exp < 1
		@for $i from 0 through -$exp
			$value: $value / $base

	@return $value


@function fact($num)
	$fact: 1
	@if $num > 0
		@for $i from 1 through $num
			$fact: $fact * $i

	@return $fact


@function _to_unitless_rad($angle)
	@if unit($angle) == deg
		$angle: $angle / 180deg * $pi

	@if unit($angle) == rad
		$angle: $angle / 1rad

	@return $angle


@function sin($angle)
	$a: _to_unitless_rad($angle)
	$sin: $a
	@for $n from 1 through $_precision
		$sin: $sin + (pow(-1, $n) / fact(2 * $n + 1) ) * pow($a, (2 * $n + 1))

	@return $sin


@function cos($angle)
	$a: _to_unitless_rad($angle)
	$cos: 1
	@for $n from 1 through $_precision
		$cos: $cos + ( pow(-1,$n) / fact(2*$n) ) * pow($a,2*$n)

	@return $cos
